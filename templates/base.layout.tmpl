{{define "base"}}
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <!-- Required meta tags -->
        <meta charset="UTF-8">
        <meta name="viewport"
              content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie=edge">
        <meta name="description" content="booking application to show mastery of golang">
        <meta name="author" content="AJ Igherighe | github.com/dataninja-python/bookings | ShoeGameAllStar">
        <title>The Page Title</title>

        <!-- css files -->
        <link href="../static/css/reset.css" rel="stylesheet">
        <link rel="stylesheet" href="../static/css/notie.css">
        <!-- <link rel="stylesheet" href="../static/css/vanilla-datapicker-bootstrap5.css"> -->
        <!-- <link href="../static/css/sweetalwert2-theme-dark@4.css" rel="stylesheet"> -->
        <link href="../static/css/bootstrap.min.css" rel="stylesheet">
        <link href="../static/css/base.css" rel="stylesheet">

        <style>
        </style>
    </head>
    <body class="">
    <!-- navigation bar -->
    <nav id="navbar-sticky" class="navbar navbar-expand navbar-dark sticky-top bg-dark m-0">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">Logo</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse"
                    aria-controls="navbarCollapse" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarCollapse">
                <ul class="navbar-nav me-auto mb-2 mb-md-0">
                    <li class="nav-item">
                        <a class="nav-link active" aria-current="page" href="/">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/about">About</a>
                    </li>
                    <li class="nav-item dropdown">
                        <a href="#" class="nav-link dropdown-toggle" id="navbarDropdown" role="button"
                           data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            Rooms
                        </a>
                        <div class="dropdown-menu" aria-labelledby="navbarDropdown">
                            <a href="/generals-quarters" class="dropdown-item">General's Quarters</a>
                            <a href="/majors-suite" class="dropdown-item">Major's Suite</a>
                        </div>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/reservation">Book Now</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/contact" aria-disabled="false">Contact</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    {{block "content" .}}

    {{end}}



    <!-- footer -->
    <footer class="footer fixed-bottom mt-auto py-3 bg-light">
        <div class="container">
            <span class="text-muted">Place sticky footer content here.</span>
        </div>
    </footer>

    <!-- javascript/typescript files -->
    <script src="../static/js/main.js"></script>
    <script src="../static/js/sweetalert2.min.js"></script>
    <script src="../static/js/notie.js"></script>
    <script src="../static/js/vanilla-datepicker-bootstrap5.js"></script>
    <!--<script src="../static/js/datepicker-native.esm.js"></script>-->
    <script src="../static/js/bootstrap.bundle.min.js"></script>

    {{block "js" .}}

    {{end}}

    <script>
         /*let attention = Prompt();*/

        (function () {
            'use strict';
            window.addEventListener('load', function () {
                // Fetch all the forms we want to apply custom Bootstrap validation styles to
                let forms = document.getElementsByClassName('needs-validation');
                // Loop over them and prevent submission
                Array.prototype.filter.call(forms, function (form) {
                    form.addEventListener('submit', function (event) {
                        if (form.checkValidity() === false) {
                            event.preventDefault();
                            event.stopPropagation();
                        }
                        form.classList.add('was-validated');
                    }, false);
                });
            }, false);
        })();


        /* function notify(msg, msgType) {
            notie.alert({
                type: msgType,
                text: msg,
            })
        }

        function notifyModal(title, text, icon, confirmationButtonText) {
            Swal.fire({
                title: title,
                html: text,
                icon: icon,
                confirmButtonText: confirmationButtonText
            })
        }

        function Prompt() {
            let toast = function (c) {
                const{
                    msg = '',
                    icon = 'success',
                    position = 'top-end',

                } = c;

                const Toast = Swal.mixin({
                    toast: true,
                    title: msg,
                    position: position,
                    icon: icon,
                    showConfirmButton: true,
                    timer: 3000,
                    timerProgressBar: true,
                    didOpen: (toast) => {
                        toast.addEventListener('mouseenter', Swal.stopTimer)
                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                    }
                })

                Toast.fire({})
            }

            let success = function (c) {
                const {
                    msg = "",
                    title = "",
                    footer = "",
                } = c

                Swal.fire({
                    icon: 'success',
                    title: title,
                    text: msg,
                    footer: footer,
                })

            }

            let error = function (c) {
                const {
                    msg = "",
                    title = "",
                    footer = "",
                } = c

                Swal.fire({
                    icon: 'error',
                    title: title,
                    text: msg,
                    footer: footer,
                })

            }

            async function custom(c) {
                const {
                    msg = "",
                    title = "",
                } = c;

                const { value: formValues } = await Swal.fire({
                    title: title,
                    html: msg,
                    backdrop: false,
                    focusConfirm: false,
                    showCancelButton: true,
                    willOpen: () => {
                        const elem = document.getElementById("exampleModal");
                        const rp = new DateRangePicker(elem, {
                            format: 'yyyy-mm-dd',
                            showOnFocus: true,
                        })
                    },
                    didOpen: () => {
                        document.getElementById("start").removeAttribute("disabled");
                        document.getElementById("end").removeAttribute("disabled");
                    },
                    preConfirm: () => {
                        return [
                            document.getElementById('start').value,
                            document.getElementById('end').value
                        ]
                    }
                })

                if (formValues) {
                    Swal.fire(JSON.stringify(formValues))
                }
            }

            return {
                toast: toast,
                success: success,
                error: error,
                custom: custom,
            }
        } */

        /*

        const Prompt = () => {
            let toast = (c) => {

                const {
                    msg = "",
                    icon = "success",
                    position = "top-end",
                } = c;

                const Toast = Swal.mixin({
                    toast: true,
                    title: msg,
                    position: position,
                    icon: icon,
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true,
                    didOpen: (toast) => {
                        toast.addEventListener("mouseenter", Swal.stopTimer)
                        toast.addEventListener("mouseleave", Swal.resumeTimer)
                    }
                });

                Toast.fire({});
            }

            let success = (c) => {

                const {
                    msg = "",
                    title = "",
                    footer = "",
                } = c

                Swal.fire({
                    icon: "success",
                    title: title,
                    text: msg,
                    footer: footer,
                });
            }

            let error = (c) => {

                const {
                    msg = "",
                    title = "",
                    footer = "",
                } = c

                Swal.fire({
                    icon: "error",
                    title: title,
                    text: msg,
                    footer: footer,
                });
            }

            const custom = async (c) => {
                const {
                    msg = "",
                    title = "",
                } = c;

                const { value: formValues } = await Swal.fire({
                    title: title,
                    html: msg,
                    backdrop: false,
                    focusConfirm: false,
                    showCancelButton: true,
                    buttonsStyling: true,
                    willOpen: () => {
                        const elem = document.getElementById("reservation-dates-modal");
                        const rp = new DateRangePicker(elem, {
                            format: "yyyy-mm-dd",
                            showOnFocus: true,
                        });
                    },
                    preConfirm: () => {
                        return [
                            document.getElementById("start").value,
                            document.getElementById("end").value,
                        ]
                    },
                    didOpen: () => {
                        document.getElementById("start").removeAttribute("disabled");
                        document.getElementById("end").removeAttribute("disabled");
                    }
                });

                if (formValues) {
                    Swal.fire(JSON.stringify(formValues));
                }
            }

            return {
                toast: toast,
                success: success,
                error: error,
                custom: custom,
            }
        }

        let attention = Prompt();

        // anonymous function that fires when this script tag loads in the browsesr
        (() => {
            // get all the forms we want to apply custom bootstrap validation styles to
            let forms = document.getElementsByClassName("needs-validation");
            // loop over the form elements and prevent submission
            Array.prototype.filter.call(forms, (form) => {
                form.addEventListener("submit", (event) => {
                    if(form.checkValidity() === false) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add("was-validated");
                });
            }, false);
        })();

        const notify = (msg, msgType) => {
            notie.alert({
                type: msgType,
                text: msg,
            })
        }

        const notifyModal = (title, text, icon, confirmationButtonText) => {
            Swal.fire({
                title: title,
                html: text,
                icon: icon,
                confirmationButtonText: confirmationButtonText,
            })
        } */





    </script>
    </body>
    </html>
{{end}}